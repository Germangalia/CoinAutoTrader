{"version":3,"sources":["statistics-benefit-evolution.js"],"names":[],"mappingsfile":"statistics-benefit-evolution.js","sourcesContent":["function drawLineChart() {\n\n    var response = null;\n    var objs = [];\n    var labels = [];\n    var data = [];\n\n    //\n    //// Add a helper to format timestamp data\n    //Date.prototype.formatMMDDYYYY = function() {\n    //    return (this.getMonth() + 1) +\n    //        \"/\" +  this.getDate() +\n    //        \"/\" +  this.getFullYear();\n    //};\n\n    function getHistory() {\n        var httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', \"../api/statistics/getUserHistory\", false);   //false for syncronus\n        httpRequest.send();\n        return httpRequest.responseText;\n    }\n\n    function parseResponse (response){\n        // JavaScript array of JavaScript objects\n        var objects = [];\n        for (var i=response.length;i--;) objects = JSON.parse(response);\n\n        return objects;\n\n    }\n\n    function parseAttributes (objects, prop, convert){\n        var arr = [];\n        for (var i= 0 ; i < objects.length ; i++){\n            if(convert == 'number') {\n                var number = objects[i][prop];\n                arr.push(parseFloat(number));\n            }else if(convert == 'date') {\n                var date = objects[i][prop];\n                arr.push(new Date(date));\n            }else if (convert == 'string'){\n                arr.push(objects[i][prop]);\n            }\n\n        }\n        return arr;\n\n    }\n\n    response = getHistory();\n    objs = parseResponse(response);\n\n    labels= parseAttributes(objs, 'created_at', 'date');\n    data= parseAttributes(objs, 'benefit', 'number');\n\n    //window.console.log(data);\n    //window.console.log(labels);\n\n\n    function makeChart(labels, data) {\n\n\n        // Create the chart.js data structure using 'labels' and 'data'\n        var graphData = {\n            //type: 'line',\n            labels : labels,\n            datasets : [{\n                label: \"Benefit\",\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: \"rgba(75,192,192,0.4)\",\n                borderColor: \"rgba(75,192,192,1)\",\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: \"rgba(75,192,192,1)\",\n                pointBackgroundColor: \"#fff\",\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n                pointHoverBorderColor: \"rgba(220,220,220,1)\",\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n                data                  : data\n            }]\n        };\n\n        // Get the context of the canvas element we want to select\n        var ctx = document.getElementById(\"myLineChart\").getContext(\"2d\");\n\n        // Instantiate a new chart\n        var myLineChart = new Chart(ctx, {\n            type: 'line',\n            data: graphData,\n            //options: options\n        });\n    };\n\n    makeChart(labels, data);\n}\n\ndrawLineChart();\n"],"sourceRoot":"/source/"}